{"ast":null,"code":"var $ = require('../internals/export');\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar toString = require('../internals/to-string');\nvar lengthOfArrayLike = require('../internals/length-of-array-like');\nvar $TypeError = TypeError;\nvar ArrayPrototype = Array.prototype;\nvar push = uncurryThis(ArrayPrototype.push);\nvar join = uncurryThis(ArrayPrototype.join);\n\n// `String.cooked` method\n// https://github.com/tc39/proposal-string-cooked\n$({\n  target: 'String',\n  stat: true,\n  forced: true\n}, {\n  cooked: function cooked(template /* , ...substitutions */) {\n    var cookedTemplate = toIndexedObject(template);\n    var literalSegments = lengthOfArrayLike(cookedTemplate);\n    var argumentsLength = arguments.length;\n    var elements = [];\n    var i = 0;\n    while (literalSegments > i) {\n      var nextVal = cookedTemplate[i++];\n      if (nextVal === undefined) throw $TypeError('Incorrect template');\n      push(elements, toString(nextVal));\n      if (i === literalSegments) return join(elements, '');\n      if (i < argumentsLength) push(elements, toString(arguments[i]));\n    }\n  }\n});","map":{"version":3,"names":["$","require","uncurryThis","toIndexedObject","toString","lengthOfArrayLike","$TypeError","TypeError","ArrayPrototype","Array","prototype","push","join","target","stat","forced","cooked","template","cookedTemplate","literalSegments","argumentsLength","arguments","length","elements","i","nextVal","undefined"],"sources":["/Users/sandaru/DATA DRIVE/Degree/L6/FYP/Project/block-verify/client/node_modules/core-js/modules/esnext.string.cooked.js"],"sourcesContent":["var $ = require('../internals/export');\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar toIndexedObject = require('../internals/to-indexed-object');\nvar toString = require('../internals/to-string');\nvar lengthOfArrayLike = require('../internals/length-of-array-like');\n\nvar $TypeError = TypeError;\nvar ArrayPrototype = Array.prototype;\nvar push = uncurryThis(ArrayPrototype.push);\nvar join = uncurryThis(ArrayPrototype.join);\n\n// `String.cooked` method\n// https://github.com/tc39/proposal-string-cooked\n$({ target: 'String', stat: true, forced: true }, {\n  cooked: function cooked(template /* , ...substitutions */) {\n    var cookedTemplate = toIndexedObject(template);\n    var literalSegments = lengthOfArrayLike(cookedTemplate);\n    var argumentsLength = arguments.length;\n    var elements = [];\n    var i = 0;\n    while (literalSegments > i) {\n      var nextVal = cookedTemplate[i++];\n      if (nextVal === undefined) throw $TypeError('Incorrect template');\n      push(elements, toString(nextVal));\n      if (i === literalSegments) return join(elements, '');\n      if (i < argumentsLength) push(elements, toString(arguments[i]));\n    }\n  }\n});\n"],"mappings":"AAAA,IAAIA,CAAC,GAAGC,OAAO,CAAC,qBAAqB,CAAC;AACtC,IAAIC,WAAW,GAAGD,OAAO,CAAC,oCAAoC,CAAC;AAC/D,IAAIE,eAAe,GAAGF,OAAO,CAAC,gCAAgC,CAAC;AAC/D,IAAIG,QAAQ,GAAGH,OAAO,CAAC,wBAAwB,CAAC;AAChD,IAAII,iBAAiB,GAAGJ,OAAO,CAAC,mCAAmC,CAAC;AAEpE,IAAIK,UAAU,GAAGC,SAAS;AAC1B,IAAIC,cAAc,GAAGC,KAAK,CAACC,SAAS;AACpC,IAAIC,IAAI,GAAGT,WAAW,CAACM,cAAc,CAACG,IAAI,CAAC;AAC3C,IAAIC,IAAI,GAAGV,WAAW,CAACM,cAAc,CAACI,IAAI,CAAC;;AAE3C;AACA;AACAZ,CAAC,CAAC;EAAEa,MAAM,EAAE,QAAQ;EAAEC,IAAI,EAAE,IAAI;EAAEC,MAAM,EAAE;AAAK,CAAC,EAAE;EAChDC,MAAM,EAAE,SAASA,MAAM,CAACC,QAAQ,CAAC,0BAA0B;IACzD,IAAIC,cAAc,GAAGf,eAAe,CAACc,QAAQ,CAAC;IAC9C,IAAIE,eAAe,GAAGd,iBAAiB,CAACa,cAAc,CAAC;IACvD,IAAIE,eAAe,GAAGC,SAAS,CAACC,MAAM;IACtC,IAAIC,QAAQ,GAAG,EAAE;IACjB,IAAIC,CAAC,GAAG,CAAC;IACT,OAAOL,eAAe,GAAGK,CAAC,EAAE;MAC1B,IAAIC,OAAO,GAAGP,cAAc,CAACM,CAAC,EAAE,CAAC;MACjC,IAAIC,OAAO,KAAKC,SAAS,EAAE,MAAMpB,UAAU,CAAC,oBAAoB,CAAC;MACjEK,IAAI,CAACY,QAAQ,EAAEnB,QAAQ,CAACqB,OAAO,CAAC,CAAC;MACjC,IAAID,CAAC,KAAKL,eAAe,EAAE,OAAOP,IAAI,CAACW,QAAQ,EAAE,EAAE,CAAC;MACpD,IAAIC,CAAC,GAAGJ,eAAe,EAAET,IAAI,CAACY,QAAQ,EAAEnB,QAAQ,CAACiB,SAAS,CAACG,CAAC,CAAC,CAAC,CAAC;IACjE;EACF;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}
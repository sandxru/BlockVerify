{"ast":null,"code":"'use strict';\n\nvar $ = require('../internals/export');\nvar getBuiltIn = require('../internals/get-built-in');\nvar bind = require('../internals/function-bind-context');\nvar call = require('../internals/function-call');\nvar aCallable = require('../internals/a-callable');\nvar anObject = require('../internals/an-object');\nvar speciesConstructor = require('../internals/species-constructor');\nvar getSetIterator = require('../internals/get-set-iterator');\nvar iterate = require('../internals/iterate');\n\n// `Set.prototype.map` method\n// https://github.com/tc39/proposal-collection-methods\n$({\n  target: 'Set',\n  proto: true,\n  real: true,\n  forced: true\n}, {\n  map: function map(callbackfn /* , thisArg */) {\n    var set = anObject(this);\n    var iterator = getSetIterator(set);\n    var boundFunction = bind(callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n    var newSet = new (speciesConstructor(set, getBuiltIn('Set')))();\n    var adder = aCallable(newSet.add);\n    iterate(iterator, function (value) {\n      call(adder, newSet, boundFunction(value, value, set));\n    }, {\n      IS_ITERATOR: true\n    });\n    return newSet;\n  }\n});","map":{"version":3,"names":["$","require","getBuiltIn","bind","call","aCallable","anObject","speciesConstructor","getSetIterator","iterate","target","proto","real","forced","map","callbackfn","set","iterator","boundFunction","arguments","length","undefined","newSet","adder","add","value","IS_ITERATOR"],"sources":["/Users/sandaru/DATA DRIVE/Degree/L6/FYP/Project/block-verify/client/node_modules/core-js/modules/esnext.set.map.js"],"sourcesContent":["'use strict';\nvar $ = require('../internals/export');\nvar getBuiltIn = require('../internals/get-built-in');\nvar bind = require('../internals/function-bind-context');\nvar call = require('../internals/function-call');\nvar aCallable = require('../internals/a-callable');\nvar anObject = require('../internals/an-object');\nvar speciesConstructor = require('../internals/species-constructor');\nvar getSetIterator = require('../internals/get-set-iterator');\nvar iterate = require('../internals/iterate');\n\n// `Set.prototype.map` method\n// https://github.com/tc39/proposal-collection-methods\n$({ target: 'Set', proto: true, real: true, forced: true }, {\n  map: function map(callbackfn /* , thisArg */) {\n    var set = anObject(this);\n    var iterator = getSetIterator(set);\n    var boundFunction = bind(callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n    var newSet = new (speciesConstructor(set, getBuiltIn('Set')))();\n    var adder = aCallable(newSet.add);\n    iterate(iterator, function (value) {\n      call(adder, newSet, boundFunction(value, value, set));\n    }, { IS_ITERATOR: true });\n    return newSet;\n  }\n});\n"],"mappings":"AAAA,YAAY;;AACZ,IAAIA,CAAC,GAAGC,OAAO,CAAC,qBAAqB,CAAC;AACtC,IAAIC,UAAU,GAAGD,OAAO,CAAC,2BAA2B,CAAC;AACrD,IAAIE,IAAI,GAAGF,OAAO,CAAC,oCAAoC,CAAC;AACxD,IAAIG,IAAI,GAAGH,OAAO,CAAC,4BAA4B,CAAC;AAChD,IAAII,SAAS,GAAGJ,OAAO,CAAC,yBAAyB,CAAC;AAClD,IAAIK,QAAQ,GAAGL,OAAO,CAAC,wBAAwB,CAAC;AAChD,IAAIM,kBAAkB,GAAGN,OAAO,CAAC,kCAAkC,CAAC;AACpE,IAAIO,cAAc,GAAGP,OAAO,CAAC,+BAA+B,CAAC;AAC7D,IAAIQ,OAAO,GAAGR,OAAO,CAAC,sBAAsB,CAAC;;AAE7C;AACA;AACAD,CAAC,CAAC;EAAEU,MAAM,EAAE,KAAK;EAAEC,KAAK,EAAE,IAAI;EAAEC,IAAI,EAAE,IAAI;EAAEC,MAAM,EAAE;AAAK,CAAC,EAAE;EAC1DC,GAAG,EAAE,SAASA,GAAG,CAACC,UAAU,CAAC,iBAAiB;IAC5C,IAAIC,GAAG,GAAGV,QAAQ,CAAC,IAAI,CAAC;IACxB,IAAIW,QAAQ,GAAGT,cAAc,CAACQ,GAAG,CAAC;IAClC,IAAIE,aAAa,GAAGf,IAAI,CAACY,UAAU,EAAEI,SAAS,CAACC,MAAM,GAAG,CAAC,GAAGD,SAAS,CAAC,CAAC,CAAC,GAAGE,SAAS,CAAC;IACrF,IAAIC,MAAM,GAAG,KAAKf,kBAAkB,CAACS,GAAG,EAAEd,UAAU,CAAC,KAAK,CAAC,CAAC,GAAG;IAC/D,IAAIqB,KAAK,GAAGlB,SAAS,CAACiB,MAAM,CAACE,GAAG,CAAC;IACjCf,OAAO,CAACQ,QAAQ,EAAE,UAAUQ,KAAK,EAAE;MACjCrB,IAAI,CAACmB,KAAK,EAAED,MAAM,EAAEJ,aAAa,CAACO,KAAK,EAAEA,KAAK,EAAET,GAAG,CAAC,CAAC;IACvD,CAAC,EAAE;MAAEU,WAAW,EAAE;IAAK,CAAC,CAAC;IACzB,OAAOJ,MAAM;EACf;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}